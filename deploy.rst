成果物のデプロイ
========================

TypeScriptで作ったアプリケーションの開発環境の作り方を、バリエーションごとに紹介してきました。それぞれの環境でビルド方法についても紹介しました。本章ではデプロイについて紹介します。

.. todo::

   npmパッケージ to npm
   npmパッケージ to nexus
   Dockerイメージ

   https://qiita.com/kannkyo/items/5195069c65350b60edd9

   https://qiita.com/shibukawa/items/fd49f98736045789ffc3#%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E5%91%A8%E3%82%8A%E3%81%AEdocker%E8%A8%AD%E5%AE%9A

npmパッケージとしてデプロイ
--------------------------------------

この方法でデプロイする対象は以下の通りです。

* Node.js用のライブラリ
* Node.js用のCLIツール
* Node.js用のウェブサービス

ビルドしたらアーカイブファイルを作ってみましょう。これで、package.tgzファイルができます。npm installにこのファイルのパスを渡すとインストールできます。アップロードする前に、サンプルのプロジェクトを作ってみて、このパッケージをインストールしてみて、必要なファイルが抜けていないか、必要な依存パッケージが足りているかといったことを確認してみましょう。また、展開してみて、余計なファイルが含まれていないことも確認すると良いでしょう。

.. code-block:: bash

   $ npm pack

* ビルドには必要だが、配布する必要のないファイルが含まれている

  ``.npmignore``\ ファイルにそのファイル名を列挙します。パッケージを作る時に無視されます。

* ビルドには必要だが、利用環境でインストール不要なパッケージがある

  ``package.json``\ の\ ``dependencies``\ から、\ ``devDependencies``\ に移動します。

npmのサイトにアップロードしてみましょう。

パッケージリポジトリはnpm以外にもあります。例えば、Nexusを使えばローカルにパッケージリポジトリが建てられます。GitHubもパッケージリポジトリを提供しています。

.. todo:: あとで書く

Dockerイメージの作成
-------------------------------------------

この方法でデプロイする対象は以下の通りです。

* Node.js用のCLIツール
* Node.js用のウェブサービス
* Deno用のCLIツール
* Deno用のウェブサービス
* ウェブフロントエンド

コンテナとは何か
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

コンテナは1アプリケーションだけが格納されたミニOS環境です。Linux上でもmacOS上でもWindows上でもクラウド環境でも、アプリケーションからは同じOS環境のように見えます。ポータブルなアプリケーション配布・実行環境としてますます地位が高まっています。コンテナは動いている環境のことを指します。コンテナは実行時にイメージを読み込んで環境を構築します。これは実行に必要なファイルと起動時のコマンドなどがセットになったものです。開発者が作るのはイメージです。

コンテナ関係のシステムは、実行のランタイムやビルド方法など、それぞれにいくつか選択肢がありますが、開発時の環境として一番ポピュラーなのがDockerです。本書ではコンテナ=Dockerコンテナとして説明をします。

ローカルではコンテナはDocker for Desktopを使ってイメージの作成や動作のテストができます。運用環境として、どのクラウド事業者もKubernetesを使ってコンテナベースで本番運用環境の維持管理できるサービスを提供しています。1つのノードにリソースが許すかぎり多数のコンテナを配置することができ、実行時の効率も上がります。
それ以外にも、AWS ECSやAWS Fargate、GCP Cloud Runなど、単体のDockerイメージやDockerイメージ群を起動できるサービスもあります。コンテナはウェブアプリケーションのような起動し続けるサービスにも使えますし、一度実行して終了するバッチ処理にも活用できます。

Dockerコンテナ内のアプリケーションは外部の環境と切り離されて実行されますが、Dockerの実行時のオプションで外界と接点を設定できます。複雑な設定が必要なアプリケーションの場合は、設定ファイルをコンテナ内の特定のパスに置くこともできますが、推奨されるのは環境変数のみによって制御されるアプリケーションです。

* 環境変数
* ネットワークの設定

  * 特定のポートをlocalhostに公開
  * localhostとコンテナ内部のを同一ネットワークにするかどうか

* ファイルやフォルダのマウント
* 最後に実行するコマンドのオプション

コンテナは上記のように、クラウドサービスに直接デプロイして実行できます。

複数のコンテナに必要な設定を与えてまとめて起動するツール（コンテナオーケストレーションツール）もあります。それがdocker-composeやKubernetesです。

Dockerのベースイメージの選択
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Dockerイメージを作成するには\ ``Dockerfile``\ という設定ファイルを作成し、\ ``docker build``\ コマンドを使ってイメージを作成します。イメージは何もないところからゼロで作ることもできなくはないですが、基本的にはベースイメージと呼ばれる土台となるイメージを選択して、それに対して必要なファイルを追加します。ビルド済みのアプリケーションを単に置く、という構築方法もありますが（公式イメージの多くはそれに近いことをしている）、アプリケーション開発の場合はソースコードをDocker内部に送り、それをDocker内部でビルドして、実行用イメージを作成します。できあがったイメージをコンパクトにするために、ビルド用イメージと、実行用イメージを分ける（マルチステージビルド）が今の主流です。

Node.jsの公式のイメージは以下のサイトにあります。

* https://hub.docker.com/_/node/

バージョンと、OSの組み合わせだけイメージがあります。その中でおすすめの組み合わせが次の3つです。

.. list-table::
   :header-rows: 1
   :widths: 5 10 10 10 30

   - * 用途 
     * バリエーション
     * ビルド用イメージ 
     * 実行用イメージ
     * 解説
   - * Node.js(CLI/ウェブアプリ)
     * 鉄板
     * nodeのDebian系
     * nodeのDebian-slim系
     * ネイティブ拡張があっても利用可能
   - * Node.js(CLI/ウェブアプリ)
     * ネイティブ拡張なし
     * nodeのDebian-slim系
     * nodeのDebian-slim系
     * ビルド環境もコンパクトに
   - * Node.js(CLI/ウェブアプリ)
     * セキュリティ重視
     * nodeのDebian-slim系
     * distrolessのnode.js
     * コンテナへのログインを許さないセキュアな実行イメージ
   - * ウェブフロントエンド配信
     *
     * nodeのDebian-slim系
     * nginx:alpine
     *

.. todo:: Denoはこちらのスレッドを見守る https://github.com/denoland/deno/issues/3356

DebianはLinuxディストリビューションの名前です。buster (Debian 10)、stretch (Debian 9)、jessie (Debian 8)が執筆時点ではコンテナリポジトリにあります。それぞれ、無印がフル版で、gccや各種開発用ライブラリを含みます。いろいろ入っていて便利ですが、イメージサイズは大きめです。slimがつくバージョンがそれぞれにあります。これはNode.jsは入っているが、gccなどがないバージョンです。例えば、最新LTS（執筆時点で12）のDebianの開発環境込みのイメージであれば、\ ``node:12-buster``\ を選びます。

もう一つ、GCPのコンテナレジストリで提供されているのがdistrolessです。こちらはシェルもなく、セキュリティパッチも積極的に当てていくという、セキュリティにフォーカスしたDebianベースのイメージです。
シェルがないということはリモートログインができませんので、踏み台にされる心配がないイメージです。これはGCPのコンテナレジストリに登録されており、\ ``gcr.io/distroless/nodejs``\ という名前で利用可能です。

Alpineというサイズ重視のOSイメージはありますが、あとから追加インストールしなければならないパッケージが増えがちなのと、パッケージのバージョン固定がしにくい（古いパッケージが削除されてしまってインストールできなくなる）などの問題がありますし、他のイメージがだいたいDebianベースなので、Debianベースのもので揃えておいた方がトラブルは少ないでしょう。

Dockerイメージはサイズが重視されますが、ビルド時間や再ビルド時間も大切な要素です。開発ツールなしのイメージ（slimやalpineなど）を選び、必要な開発ツールだけをダウンロードするのはサイズの上では有利ですが、すでにできあがったイメージをただダウンロードするのよりも、依存関係を計算しながら各パッケージをダウンロードする方が時間がかかります。

CLI/ウェブアプリケーションのイメージ作成
-------------------------------------------------------------

CLIとウェブアプリケーションの場合の手順はあまり変わらないので一緒に説明します。ベースイメージの選択では3種類の組み合わせがありました。

* C拡張あり（Debian系でビルド）
* C拡張なし（Debian-slim系でビルド）
* セキュリティ重視（destrolessに配信）

前二つはベースイメージが変わるだけですので、まとめて紹介します。

.. code-block:: docker

   FROM 

ウェブフロントエンドのDockerイメージの作成
-----------------------------------------------------

シングルページアプリケーションをビルドすると静的なHTMLやJS、CSSのファイル群ができます。これらのファイルを利用する方法はいくつかあります。

* CDNにアップロードする
* オブジェクトストレージにアップする
* Dockerコンテナとしてデプロイする

このうち、CDNやオブジェクトストレージへのアップロードはそれぞれのサービスごとの作法に従って行ます。ここではDockerコンテナとしてデプロイする方法を紹介します。

